#!/usr/bin/env python3

import os
import sys

import common
import lkmc.import_path
import path_properties
import thread_pool

class Main(common.TestCliFunction):
    def __init__(self):
        super().__init__(
            supported_archs=common.consts['crosstool_ng_supported_archs'],
        )
        self.add_argument(
            'tests',
            nargs='*',
            help='''\
If given, run only the given tests. Otherwise, run all tests.
'''
        )

    def setup_one(self):
        self.env['tests'] = self.resolve_targets(
            self.env['baremetal_source_dir'],
            self.env['tests']
        )

    def timed_main(self):
        run_args = self.get_common_args()
        rootdir_abs_len = len(self.env['root_dir'])
        with thread_pool.ThreadPool(
            self.run_test,
            handle_output=self.handle_output_function,
            nthreads=self.env['nproc'],
            thread_id_arg='thread_id',
            submit_raise_exit=self.env['quit_on_fail'],
        ) as my_thread_pool:
            for test in self.env['tests']:
                for path, in_dirnames, in_filenames in self.sh.walk(test):
                    path_abs = os.path.abspath(path)
                    dirpath_relative_root = path_abs[rootdir_abs_len + 1:]
                    for in_filename in in_filenames:
                        if os.path.splitext(in_filename)[1] in (self.env['c_ext'], self.env['asm_ext']):
                            path_relative_root = os.path.join(dirpath_relative_root, in_filename)
                            my_path_properties = path_properties.get(path_relative_root)
                            if my_path_properties.should_be_tested(self.env):
                                cur_run_args = run_args.copy()
                                cur_run_args.update({
                                    'baremetal': os.path.relpath(os.path.join(path_abs, in_filename), os.getcwd()),
                                })
                                cur_run_args.update(my_path_properties['test_run_args'])
                                my_thread_pool.submit({
                                    'expected_exit_status': my_path_properties['exit_status'],
                                    'run_args': cur_run_args,
                                    'run_obj': lkmc.import_path.import_path_main('run'),
                                    'test_id': path_relative_root,
                                })
        return self._handle_thread_pool_errors(my_thread_pool)

if __name__ == '__main__':
    Main().cli()
